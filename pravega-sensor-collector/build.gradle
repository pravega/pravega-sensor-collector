/**
 * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 */

buildscript {
    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath("com.github.spotbugs.snom:spotbugs-gradle-plugin:${spotbugsPluginVersion}")
        classpath("gradle.plugin.com.github.johnrengelman:shadow:${shadowPluginVersion}")
    }
}

apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "com.github.spotbugs"
apply plugin: 'checkstyle'
apply plugin: "application"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "jacoco"

group = "io.pravega"
archivesBaseName = "pravega-sensor-collector"
description = "pravega-sensor-collector"
mainClassName = "io.pravega.sensor.collector.PravegaSensorCollectorApp"
sourceCompatibility = 11
targetCompatibility = 11

test {
    useJUnitPlatform()
}

dependencies {
    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"
    implementation "ch.qos.logback:logback-classic:${qosLogbackVersion}"
    implementation "ch.qos.logback:logback-core:${qosLogbackVersion}"

    implementation "io.pravega:pravega-client:${pravegaVersion}",
            "io.pravega:pravega-common:${pravegaVersion}",
            "commons-cli:commons-cli:${commonsCLIVersion}"

    testImplementation "io.pravega:pravega-standalone:${pravegaVersion}",
            "io.pravega:pravega-test-integration:${pravegaVersion}"
    
    if (includePravegaCredentials.toBoolean()) {
        implementation "io.pravega:pravega-keycloak-client:${pravegaCredentialsVersion}"
    }

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "org.xerial:sqlite-jdbc:${sqliteVersion}"
    implementation "org.apache.commons:commons-math3:${commonsMath3Version}"
    implementation "org.apache.commons:commons-csv:${commonsCSVVersion}"
    implementation "commons-codec:commons-codec:${commonsCodecVersion}"
    implementation "com.github.vladimir-bukhtoyarov:bucket4j-core:${bucket4jVersion}"
    implementation "org.eclipse.milo:sdk-client:${miloVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "com.google.auto.service:auto-service:${autoServiceVersion}"
    annotationProcessor "com.google.auto.service:auto-service:${autoServiceVersion}"

    implementation "org.apache.parquet:parquet-avro:${parquetVersion}"
    implementation "org.apache.parquet:parquet-hadoop:${parquetVersion}"
    implementation "org.apache.hadoop:hadoop-client:${hadoopVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"

    testImplementation "org.mockito:mockito-core:${mockitoVersion}"

    testImplementation "org.glassfish.jersey.containers:jersey-container-grizzly2-http:${grizzlyVersion}"
    testImplementation "jakarta.xml.bind:jakarta.xml.bind-api:${jakartaBindVersion}"
    testImplementation "org.glassfish.jaxb:jaxb-runtime:${jaxbVersion}"
    testImplementation "javax.servlet:javax.servlet-api:${javaxServletApiVersion}"

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

distributions {
    main {
        distributionBaseName = archivesBaseName
    }
}

distTar {
    compression = "GZIP"
}

startScripts {
    doLast {
        // Modify startup script to source the configuration file (env.sh).
        unixScript.text = unixScript.text
            .replace(
                'DEFAULT_JVM_OPTS=""',
                'DEFAULT_JVM_OPTS=""\n\n# Source configuration file\n[ -f "${CONF_FILE}" ] && . "${CONF_FILE}"')
    }
}

shadowJar{
    zip64 true
    archiveBaseName = 'pravega-sensor-collector'
    archiveClassifier = ''
}

tasks.register('runLeapAPIMockServer', JavaExec) {
    group = "Execution"
    description = "Run the mock Leap server"
    classpath = sourceSets.test.runtimeClasspath
    main = "io.pravega.sensor.collector.leap.LeapAPIMock"
}

task createWatchdogApp(type: CreateStartScripts) {
    mainClass = "io.pravega.sensor.collector.watchdog.PscWatchdogApp"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    applicationName = 'psc-watchdog'
    doLast {
        // Modify startup script to source the configuration file (env.sh).
        unixScript.text = unixScript.text
                .replace(
                        'DEFAULT_JVM_OPTS=""',
                        'DEFAULT_JVM_OPTS=""\n\n# Source configuration file\n[ -f "${CONF_FILE}" ] && . "${CONF_FILE}"')
    }
//    defaultJvmOpts = ["-Xms1024m", "-Xmx2048m"]
}

applicationDistribution.into("bin") {
    duplicatesStrategy= DuplicatesStrategy.EXCLUDE
    from(createWatchdogApp)
    fileMode = 0755
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml {
            required.set(false)
        }
        html {
            required.set(true)
        }
    }
}

spotbugs {
    toolVersion = spotbugsVersion
    ignoreFailures = false
    showProgress = true
    effort = 'max'
    reportLevel = 'default'
    includeFilter = file("$rootDir/config/spotbugs-include.xml")
    excludeFilter = file("$rootDir/config/spotbugs-exclude.xml")
    //baselineFile = file("baseline.xml")
}
checkstyle {
    toolVersion = checkstyleVersion
    configFile = file("$rootDir/config/checkstyle.xml")
    ignoreFailures = false
    configProperties = [importControlFile: "$rootDir/config/import-control.xml",
                        suppressionsFile: "$rootDir/config/suppressions.xml"]
    checkstyleMain {
        source = sourceSets.main.allSource
    }
    configurations {
        checkstyle
    }

    dependencies{
        assert project.hasProperty("checkstyleVersion")

        checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
    }
}

plugins.withId('jacoco') {
    jacoco {
        toolVersion = "0.8.5"
    }
    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled false
        }
    }

    test { finalizedBy jacocoTestReport }
}
